using Microsoft.UI.Xaml;
using System;

namespace WinUI.TableView;

[StyleTypedProperty(Property = nameof(HeaderStyle), StyleTargetType = typeof(TableViewColumnHeader))]
public abstract class TableViewColumn : DependencyObject
{
    private TableViewColumnsCollection? _owningCollection;
    private TableViewColumnHeader? _headerControl;
    private double _desiredWidth;

    public abstract FrameworkElement GenerateElement();
    public abstract FrameworkElement GenerateEditingElement();

    internal void SetOwningCollection(TableViewColumnsCollection collection)
    {
        _owningCollection = collection;
    }

    public object Header
    {
        get => GetValue(HeaderProperty);
        set => SetValue(HeaderProperty, value);
    }

    public GridLength Width
    {
        get => (GridLength)GetValue(WidthProperty);
        set => SetValue(WidthProperty, value);
    }

    public double? MinWidth
    {
        get => (double?)GetValue(MinWidthProperty);
        set => SetValue(MinWidthProperty, value);
    }

    public double? MaxWidth
    {
        get => (double?)GetValue(MaxWidthProperty);
        set => SetValue(MaxWidthProperty, value);
    }

    public double ActualWidth
    {
        get => (double)GetValue(ActualWidthProperty);
        set => SetValue(ActualWidthProperty, value);
    }

    public bool CanResize
    {
        get => (bool)GetValue(CanResizeProperty);
        set => SetValue(CanResizeProperty, value);
    }

    public bool IsReadOnly
    {
        get => (bool)GetValue(IsReadOnlyProperty);
        set => SetValue(IsReadOnlyProperty, value);
    }

    public Style HeaderStyle
    {
        get => (Style)GetValue(HeaderStyleProperty);
        set => SetValue(HeaderStyleProperty, value);
    }

    public TableViewColumnHeader? HeaderControl
    {
        get => _headerControl;
        internal set
        {
            _headerControl = value;
            EnsureHeaderStyle();
        }
    }

    public Visibility Visibility
    {
        get => (Visibility)GetValue(VisibilityProperty);
        set => SetValue(VisibilityProperty, value);
    }

    internal double DesiredWidth
    {
        get => _desiredWidth;
        set
        {
            if (_desiredWidth != value)
            {
                _desiredWidth = value;
                _owningCollection?.HandleColumnPropertyChanged(this, nameof(DesiredWidth));
            }
        }
    }

    public bool IsAutoGenerated { get; internal set; }

    private void EnsureHeaderStyle()
    {
        if (_headerControl is not null && HeaderStyle is not null)
        {
            _headerControl.Style = HeaderStyle;
        }
    }


    private static void OnWidthChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
        if (d is TableViewColumn column && column._owningCollection is { })
        {
            column._owningCollection.HandleColumnPropertyChanged(column, nameof(Width));
        }
    }

    private static void OnMinWidthChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
        if (d is TableViewColumn column && column._owningCollection is { })
        {
            column._owningCollection.HandleColumnPropertyChanged(column, nameof(MinWidth));
        }
    }

    private static void OnMaxWidthChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
        if (d is TableViewColumn column && column._owningCollection is { })
        {
            column._owningCollection.HandleColumnPropertyChanged(column, nameof(MaxWidth));
        }
    }

    private static void OnActualWidthChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
        if (d is TableViewColumn column && column._owningCollection is { })
        {
            column._owningCollection.HandleColumnPropertyChanged(column, nameof(ActualWidth));
        }
    }

    private static void OnVisibilityChanged(DependencyObject d, DependencyPropertyChangedEventArgs e)
    {
        if (d is TableViewColumn column && column._owningCollection is { })
        {
            column._owningCollection.HandleColumnPropertyChanged(column, nameof(Visibility));
        }
    }

    public static readonly DependencyProperty HeaderStyleProperty = DependencyProperty.Register(nameof(HeaderStyle), typeof(Style), typeof(TableViewColumn), new PropertyMetadata(null, (d, _) => ((TableViewColumn)d).EnsureHeaderStyle()));
    public static readonly DependencyProperty HeaderProperty = DependencyProperty.Register(nameof(Header), typeof(object), typeof(TableViewColumn), new PropertyMetadata(null));
    public static readonly DependencyProperty WidthProperty = DependencyProperty.Register(nameof(Width), typeof(GridLength), typeof(TableViewColumn), new PropertyMetadata(GridLength.Auto, OnWidthChanged));
    public static readonly DependencyProperty MinWidthProperty = DependencyProperty.Register(nameof(MinWidth), typeof(double?), typeof(TableViewColumn), new PropertyMetadata(default, OnMinWidthChanged));
    public static readonly DependencyProperty MaxWidthProperty = DependencyProperty.Register(nameof(MaxWidth), typeof(double?), typeof(TableViewColumn), new PropertyMetadata(default, OnMaxWidthChanged));
    public static readonly DependencyProperty ActualWidthProperty = DependencyProperty.Register(nameof(ActualWidth), typeof(double), typeof(TableViewColumn), new PropertyMetadata(0d, OnActualWidthChanged));
    public static readonly DependencyProperty CanResizeProperty = DependencyProperty.Register(nameof(CanResize), typeof(bool), typeof(TableViewColumn), new PropertyMetadata(true));
    public static readonly DependencyProperty IsReadOnlyProperty = DependencyProperty.Register(nameof(IsReadOnly), typeof(bool), typeof(TableViewColumn), new PropertyMetadata(false));
    public static readonly DependencyProperty VisibilityProperty = DependencyProperty.Register(nameof(Visibility), typeof(Visibility), typeof(TableViewColumn), new PropertyMetadata(Visibility.Visible, OnVisibilityChanged));
}